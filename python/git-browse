#!/usr/bin/env python3
import subprocess
import sys
from git_manager import *
import os
import argparse
import re
import numpy

def main():

	parser = argparse.ArgumentParser(description='Browse git repositories in home folder.')
	parser.add_argument('regex', nargs='?', default=None)
	parser.add_argument('git_command', nargs='*', default=None)
	parser.add_argument('-g', '--gui', action='store_true')
	parser.add_argument('-f', '--file-browser', action='store_true')
	parser.add_argument('-c', '--cd', action='store_true')

	opts, unknown = parser.parse_known_args()
	repos = validate_config()

	if opts.regex:
		repos = [repo for repo in repos if re.search(opts.regex, repo)]

	for idx, repo in enumerate(repos):
		print((str(idx+1) + '. ' + os.path.basename(repo)))

	if not opts.regex:
		return 0

	choices = input('Choose a repository to browse\n').split(' ')
	chosen = []
	for choice in choices:
		if choice == '' and len(choices) == 1:
			chosen.append(repos[0])
		elif choice.isdigit():
			number_choice = int(choice) - 1
			if number_choice in range(len(repos)):
				chosen.append(repos[number_choice])
			else:
				print('Number ' + str(choice) + ' out ouf range.')
				return 1
		else:
			print('Invalid option.')
			return 2
    
	left = len(chosen)
	for repository in chosen:
		git_call = ['/usr/bin/git']
		if opts.git_command:		
			print('Executing command ' + opts.git_command[0] + ' in ' + repository)
			git_call += opts.git_command
			subprocess.call(git_call, cwd =repository)

		f = open(os.devnull, 'w')	

		if opts.file_browser:
			subprocess.Popen(['dolphin', repository], stdout=f, stderr=f)
		if opts.cd:
			subprocess.Popen(['guake', '-n', repository, repository])
		if opts.gui:
			subprocess.Popen(['qgit', '--all'], stdout=f, stderr=f, cwd=repository)

		f.close()
		cont = None

		
		while left > 1 and cont == None:
			left -= 1
			cont = str(input('Continue? y/n\n'))
			if cont.lower() in ['n', 'no']:
				print('Exiting')
				return 0
			elif cont.lower() not in ['y', 'yes']:
				print('Invalid input')
				cont = None

	return 0

if __name__ == "__main__":
   sys.exit(main())