#!/usr/bin/env python3
import subprocess
import sys
from git_manager import *
import os
import argparse
import re
import numpy

def main():

	parser = argparse.ArgumentParser(description='Browse git repositories in home folder.')
	parser.add_argument('regexp', nargs='?', default=None)
	parser.add_argument('git_command', nargs='*', default=None)
	parser.add_argument('-g', '--gui', action='store_true')
	parser.add_argument('-f', '--file-browser', action='store_true')
	parser.add_argument('-c', '--cd', action='store_true')
	parser.add_argument('-i', '--interactive', action='store_true')
	parser.add_argument('-r', '--regex', nargs='?')
	parser.add_argument('--command', nargs='?')

	opts, unknown = parser.parse_known_args()
	repos = validate_config()
	regex = opts.regexp
	if opts.regex:
		regex = opts.regex

	if regex:
		repos = [repo for repo in repos if re.search(regex, repo)]

	if len(repos) == 0:
		print('No repositories to browse.')
		return 0

	for idx, repo in enumerate(repos):
		print((str(idx+1) + '. ' + os.path.basename(repo)))

	choices = input('Choose a repository to browse (ranges can go)\n').split(' ')
	chosen = []
	for choice in choices:
		if choice == '':
			if len(repos) == 1:
				chosen.append(repos[0])
			else:
				print('Must choose a number')
				return 1
		elif '-' in choice:
			nums = choice.split('-')
			if len(nums) != 2:
				print('Invalid range: ' + choice)
				return 1		
			try:
				first = int(nums[0])-1
				last = int(nums[1])-1
				if first in range(len(repos)) and last in range(len(repos)):
					for i in range(first, last + 1):
						chosen.append(repos[i])
				else:
					print('Numbers out of range')
					return 1
			except ValueError:
				print('Range does not include proper numbers')
				return 1
		else:
			try:
				number_choice = int(choice) - 1
				if number_choice in range(len(repos)):
					chosen.append(repos[number_choice])
				else:
					print('Number ' + str(choice) + ' out ouf range.')
					return 1
			except ValueError:
				print(str(choice) + ' is not a proper number')
				return 1
    
	chosen = sorted(set(chosen))
	left = len(chosen)

	for repository in chosen:
		git_call = ['git']
		if opts.git_command:	
			git_call = 	git_call + opts.git_command + unknown
			print('Executing command ' + ' '.join(git_call) + ' in ' + repository)
			subprocess.call(git_call, cwd =repository)

		f = open(os.devnull, 'w')	

		if opts.file_browser:
			subprocess.Popen(['dolphin', repository], stdout=f, stderr=f)
		if opts.cd:
			subprocess.Popen(['guake', '-n', repository, repository])
		if opts.gui:
			subprocess.Popen(['qgit', '--all'], stdout=f, stderr=f, cwd=repository)

		f.close()
		cont = None

		while opts.interactive and left > 1 and cont == None:
			left -= 1
			cont = str(input('Continue? y/n\n'))
			if cont.lower() in ['n', 'no']:
				print('Exiting')
				return 0
			elif cont.lower() not in ['y', 'yes']:
				print('Invalid input')
				cont = None
		print('')
	return 0

if __name__ == "__main__":
   sys.exit(main())